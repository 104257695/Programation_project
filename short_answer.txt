Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Marriage Pact
-------------

Q1. It is your choice to use either an ordered or unordered set. In a few sentences, what are some of the tradeoffs between the two? Additionally, please give an example (that has not been shown in lecture) of a valid hash function that could be used to hash student names for an unordered set.

The main distinction between an ordered set and an unordered set is the way the elements are structured. In set, it keeps the components in a certain sequence. This means that the components will always be ordered and you will be able to access the first or last one easily.
On the other hand, unordered_set does not keep a certain sequence between the elements. The elements are structured internally using a hash table, which allows for faster search, addition and removal operations.

Q2. Note that we are saving pointers to names in the queue, not names themselves. Why might this be desired in this problem? What happens if the original set where the names are stored goes out of scope and the pointers are referenced?

Pointers take up less memory space because they only hold memory addresses, whereas entire strings may require more space, which is why they are used. They also prevent unnecessary duplicates of names, which is faster, especially if there are many names.
However, if the initial set of names disappears and is no longer found, the pointers in the queue will be left "dangling" and will no longer point to valid addresses. The program may crash or behave unexpectedly, since they will be pointing to memory that has already been freed.